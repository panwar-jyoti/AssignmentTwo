plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'junit:junit:4.13.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// https://mvnrepository.com/artifact/org.json/json
	implementation 'org.json:json:20231013'
	implementation 'com.google.code.gson:gson:2.10.1'

	// guava cache
	implementation 'com.google.guava:guava:latest.release'

//	map struct
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'com.mysql:mysql-connector-j:8.2.0'

	implementation 'org.apache.poi:poi:5.1.0'         //   Dependencies to Read the Excel file
	implementation 'org.apache.poi:poi-ooxml:5.1.0'
	implementation 'org.apache.commons:commons-dbcp2:2.9.0'
	implementation 'org.jfree:jfreechart:1.5.3'
	implementation 'com.itextpdf:itextpdf:5.5.13.2'
	implementation 'com.itextpdf:kernel:7.2.1'
	implementation 'com.itextpdf:layout:7.2.1'
//	// https://projectlombok.org
//	compileOnly 'org.projectlombok:lombok:1.18.20'
//	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	implementation 'org.reflections:reflections:0.9.12'
	implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.7'

}

tasks.named('test') {
	useJUnitPlatform()
}


task extractDocumentation(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	mainClass = 'com.example.demo.questionOne.DocumentationExtractor'
}

//class DocumentationExtractor {
//	public static void main(String[] args) {
//		if (args.length < 2 || !args[0].equals("--outputFile")) {
//			System.err.println("Usage: java DocumentationExtractor --outputFile <output-file>");
//			System.exit(1);
//		}
//
//		String outputFilePath = args[1];
//
//		// Perform the documentation extraction and analysis
//		// ... (see the code below for details)
//
//		// For simplicity, print a message indicating completion
//		System.out.println("Documentation extraction completed. Output file: " + outputFilePath);
//	}
//}

//task generateDocumentation(type: JavaExec, dependsOn: compileJava) {
//	classpath = sourceSets.main.runtimeClasspath
//	mainClass = 'com.example.demo.questionOne.AnnotationParser'
//
//	// Discover classes annotated with @ClassDocumentation
//	def annotatedClasses = findAnnotatedClasses('com.example', 'ClassDocumentation')
//	if (!annotatedClasses.isEmpty()) {
//		args annotatedClasses.join(',')
//	} else {
//		doLast {
//			logger.lifecycle 'No classes annotated with @ClassDocumentation found.'
//		}
//	}
//}
//
//def findAnnotatedClasses(String packageName, String annotationName) {
//	def result = []
//	def fileTree = fileTree(dir: sourceSets.main.java.srcDirs, include: '**/*.java').
//	fileTree.each { file ->
//		def content = file.text
//		if (content.contains("@${annotationName}")) {
//			def className = file.relativePath.pathString.replaceAll('/', '.').replaceAll('\\.java$', '')
//			result << className
//		}
//	}
//	return result
//}